`begin_keywords "1800-2012"
`line 1 "mem_wr.v" 1
 

`line 3 "mem_wr.v" 0
module mem_wr (
  clk,
  rst,
  wr,
  addr,
  data_in,
  data_out,
  ack,
  stb,
  in_addr_range,
  xram_addr,
  xram_data_out,
  xram_data_in,
  xram_ack,
  xram_stb,
  xram_wr,
  memwr_state,
  memwr_rdaddr,
  memwr_wraddr,
  memwr_len,
  memwr_step
);

`line 26 "mem_wr.v" 0
input clk, rst, wr,stb;
input [7:0] data_in;
input [15:0] addr;
output [7:0] data_out;
output ack;
output in_addr_range;

`line 33 "mem_wr.v" 0
 
output [15:0] xram_addr;
output [7:0] xram_data_out;
input [7:0] xram_data_in;
input xram_ack;
output xram_stb;
output xram_wr;

`line 41 "mem_wr.v" 0
 
output [1:0] memwr_state;
output [15:0] memwr_rdaddr, memwr_wraddr, memwr_len;
output memwr_step;


`line 47 "mem_wr.v" 0
 
localparam MEMWR_ADDR_START = 16'hf9f0;
 

`line 51 "mem_wr.v" 0
 
localparam MEMWR_REG_START     = 16'hf9f0;  
localparam MEMWR_REG_STATE     = 16'hf9f1;  
localparam MEMWR_REG_RD_ADDR   = 16'hf9f2;  
localparam MEMWR_REG_WR_ADDR   = 16'hf9f4;  
localparam MEMWR_REG_LEN       = 16'hf9f6;  
localparam MEMWR_REG_BUFF_ADDR = 16'hf9f8;  
localparam MEMWR_REG_MODE      = 16'hf9f9;  

`line 60 "mem_wr.v" 0
 
localparam MEMWR_ADDR_END = 16'hfa00;
 

`line 64 "mem_wr.v" 0
 
wire in_addr_range = addr >= MEMWR_ADDR_START && addr < MEMWR_ADDR_END;
wire ack = stb && in_addr_range;

`line 68 "mem_wr.v" 0
 
reg [1:0]  memwr_reg_state;
wire [1:0] memwr_state = memwr_reg_state;

`line 72 "mem_wr.v" 0
 
localparam STATE_IDLE       = 2'b00;
localparam STATE_READ_DATA  = 2'b01;
localparam STATE_WRITE_DATA = 2'b10;

`line 77 "mem_wr.v" 0
 
wire state_idle       = memwr_reg_state == STATE_IDLE;
wire state_read_data  = memwr_reg_state == STATE_READ_DATA;
wire state_write_data = memwr_reg_state == STATE_WRITE_DATA;

`line 82 "mem_wr.v" 0
 
wire sel_reg_start = addr == MEMWR_REG_START;
wire sel_reg_state = addr == MEMWR_REG_STATE;
wire sel_reg_rd_addr = {addr[15:1],1'b0} == MEMWR_REG_RD_ADDR;
wire sel_reg_wr_addr = {addr[15:1],1'b0} == MEMWR_REG_WR_ADDR;
wire sel_reg_len = {addr[15:1],1'b0} == MEMWR_REG_LEN;
wire wren = wr && state_idle;

`line 90 "mem_wr.v" 0
wire start_op = sel_reg_start && data_in[0] && stb && wren;
wire write_only = start_op && data_in[1];  

`line 93 "mem_wr.v" 0
 
wire [1:0] state_next;

`line 96 "mem_wr.v" 0
wire [1:0] state_next_idle;
wire [1:0] state_next_read_data;
wire [1:0] state_next_write_data;

`line 100 "mem_wr.v" 0
assign state_next = 
  state_idle       ? state_next_idle       :
  state_read_data  ? state_next_read_data  :
  state_write_data ? state_next_write_data : 2'bx;

`line 105 "mem_wr.v" 0
wire memwr_step = memwr_reg_state != state_next;

`line 107 "mem_wr.v" 0
 
assign state_next_idle = write_only ? STATE_WRITE_DATA :
                         start_op   ? STATE_READ_DATA  : STATE_IDLE; 
 
assign state_next_read_data = read_last_byte_acked ? STATE_WRITE_DATA : STATE_READ_DATA;
 
assign state_next_write_data = finished    ? STATE_IDLE : STATE_WRITE_DATA;

`line 115 "mem_wr.v" 0
 
reg [15:0] reg_bytes_written;
reg [15:0] reg_bytes_read;
wire [15:0] bytes_read_next;
wire [15:0] bytes_written_next;
assign bytes_read_next = 
  state_idle                  ? 16'b0              :
  state_read_data && xram_ack ? reg_bytes_read + 1 : reg_bytes_read; 
assign bytes_written_next = 
  state_idle                   ? 16'b0              :
  state_write_data && xram_ack ? reg_bytes_written + 1 : reg_bytes_written;

`line 127 "mem_wr.v" 0
 
wire read_last_byte = bytes_read_next == memwr_reg_len || xram_data_in === 8'hxx;
wire read_last_byte_acked = read_last_byte && xram_ack;

`line 131 "mem_wr.v" 0
 
wire writing_last_byte = bytes_written_next == reg_bytes_read || xram_data_out === 8'hxx;
wire write_last_byte_acked = writing_last_byte && xram_ack;

`line 135 "mem_wr.v" 0
 
wire finished = write_last_byte_acked;


`line 139 "mem_wr.v" 0
reg [7:0] block [0:'h2000];

`line 141 "mem_wr.v" 0
wire [7:0] data_out_state, data_out_rd_addr, data_out_wr_addr, data_out_len;

`line 143 "mem_wr.v" 0
 
assign data_out_state = {6'd0, memwr_reg_state};

`line 146 "mem_wr.v" 0
wire [7:0] data_out;
assign data_out = sel_reg_state     ? data_out_state
                : sel_reg_rd_addr   ? data_out_rd_addr
                : sel_reg_wr_addr   ? data_out_wr_addr
                : sel_reg_len       ? data_out_len
                : 8'd0;

`line 153 "mem_wr.v" 0
 
wire [15:0] memwr_reg_rd_addr;
reg2byte memwr_reg_rd_addr_i(
    .clk        (clk),
    .rst        (rst),
    .en         (sel_reg_rd_addr),
    .wr         (sel_reg_rd_addr && wren),
    .addr       (addr[0]),
    .data_in    (data_in),
    .data_out   (data_out_rd_addr),
    .reg_out    (memwr_reg_rd_addr)
);

`line 166 "mem_wr.v" 0
 
wire [15:0] memwr_reg_wr_addr;
reg2byte wr_addr_i(
    .clk        (clk),
    .rst        (rst),
    .en         (sel_reg_wr_addr),
    .wr         (sel_reg_wr_addr && wren),
    .addr       (addr[0]),
    .data_in    (data_in),
    .data_out   (data_out_wr_addr),
    .reg_out    (memwr_reg_wr_addr)
);

`line 179 "mem_wr.v" 0
 
wire [15:0] memwr_reg_len;
reg2byte reg_len_i(
    .clk        (clk),
    .rst        (rst),
    .en         (sel_reg_len),
    .wr         (sel_reg_len && wren),
    .addr       (addr[0]),
    .data_in    (data_in),
    .data_out   (data_out_len),
    .reg_out    (memwr_reg_len)
);

`line 192 "mem_wr.v" 0
wire [15:0] memwr_rdaddr = memwr_reg_rd_addr;
wire [15:0] memwr_wraddr = memwr_reg_wr_addr;
wire [15:0] memwr_len = memwr_reg_len;

`line 196 "mem_wr.v" 0
wire [64:0] buffout = {block[7], block[6], block[5], block[4], block[3], block[2], block[1], block[0]};

`line 198 "mem_wr.v" 0
 
assign xram_addr = state_read_data  ? memwr_reg_rd_addr + reg_bytes_read :
                   state_write_data ? memwr_reg_wr_addr + reg_bytes_written: 16'bx;

`line 202 "mem_wr.v" 0
assign xram_stb = state_read_data || state_write_data;
assign xram_wr = state_write_data;
reg [7:0] xram_data_out;

`line 206 "mem_wr.v" 0
reg loaded;

`line 208 "mem_wr.v" 0
 
always @(posedge clk)
begin
    if (rst) begin
      	 
           
	   
	 
        memwr_reg_state   <= STATE_IDLE;
        reg_bytes_written <= 16'b0;
	reg_bytes_read    <= 16'b0;
    end
    else begin
      	loaded            <= 1'b0;
        memwr_reg_state   <= state_next;
        reg_bytes_written <= bytes_written_next;
	reg_bytes_read    <= bytes_read_next;
	if(state_read_data && xram_ack)
	    block[reg_bytes_read] <= xram_data_in;
	else if(state_write_data)
	    xram_data_out <= block[reg_bytes_written];
    end
end

`line 232 "mem_wr.v" 0
endmodule

`line 234 "mem_wr.v" 2
